import tensorflow as tf
import pandas as pd
import time

# List initialisation for loss function saving
generator_losses = []
discriminator_losses = []

# loss function for discriminator
def discriminator_loss(real_output, fake_output):
    real_loss = cross_entropy(tf.ones_like(real_output), real_output)
    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)
    total_loss = real_loss + fake_loss
    return total_loss

# loss function for generator
def generator_loss(fake_output):
    return cross_entropy(tf.ones_like(fake_output), fake_output)

# train function
def train(train_dataset, epochs):
    for epoch in range(epochs):
        start_time = time.time()
        
        for image_batch in train_dataset:
            # parameter refresh for discriminator and generator
            with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
                generated_images = generator(seed, training=True)
                
                real_output = discriminator(image_batch, training=True)
                fake_output = discriminator(generated_images, training=True)
                
                gen_loss = generator_loss(fake_output)
                disc_loss = discriminator_loss(real_output, fake_output)
                
            gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)
            gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)
            
            generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))
            discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))
            
        
        end_time = time.time()
        
        # loss results saving
        generator_losses.append(gen_loss.numpy())
        discriminator_losses.append(disc_loss.numpy())
        
        if (epoch + 1) % 5 == 0:
            display.clear_output(wait=True)
            generate_and_save_images(generator, epoch + 1, seed)
            print(f'Time for epoch {epoch + 1} is {end_time-start_time:.4f} sec')
            print(f'Generator loss: {gen_loss.numpy()}')
            print(f'Discriminator loss: {disc_loss.numpy()}')

# model training
train(train_dataset, EPOCHS)

# creating and saving DataFrame with loss values
df_losses = pd.DataFrame({'Epoch': range(1, EPOCHS + 1), 
                          'Generator Loss': generator_losses, 
                          'Discriminator Loss': discriminator_losses})

# save DataFrame to CSV file
df_losses.to_csv('training_losses.csv', index=False)
